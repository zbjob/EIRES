# -*- coding: utf-8 -*-
"""discover_event_by_locations_in_county.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RUvNunj4VsLZlbgBxtYGgh3-k2kYG4U4
"""

from google.colab import drive
drive.mount('/content/drive')

!rm -rf extracts_county
!rm -rf county.zip
!cp ./drive/My\ Drive/Griffith/CEP/GOES16/county.zip /content/

!pip install alphashape
!pip install geopandas

!unzip county.zip

import pandas as pd 
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import os 
import alphashape
import numpy as np
import alphashape
from geopandas import gpd

dataset = '/content'
thresh_dir = './drive/My Drive/Griffith/CEP' 
label_dir = dataset + '/csv/'
location = 'county'
timeStart = '201806300000'

lats = pd.read_csv("extracts_{}/{}/{}{}_lats.csv".format(location,timeStart,location,timeStart),header=None).to_numpy()
lons = pd.read_csv("extracts_{}/{}/{}{}_lons.csv".format(location,timeStart,location,timeStart),header=None).to_numpy()

channels = ["C01","C02","C06","C07","C07_minus_C14","C11","C12","C13","C14","C15","C16"]
weathers = ["temperature","humidity","pressure"]
df_thresholds = pd.read_csv('{}/thresholds_extracts_{}.csv'.format(thresh_dir,location))
thresholds = {}
patterns = {"C01":"high","C02":"high","C06":"high","C07":"high","C07_minus_C14":"high","C14":"high","C16":"high"}

for i,c in enumerate(channels):
    thresholds[c] = df_thresholds.loc[df_thresholds['channel'] == c].iloc[0]
    # thresholds[c] = pd.read_csv("./kMeans/results/threshold_{}.csv".format(c)).iloc[0]


def getLevel(channel,value):
    if value >= thresholds[channel]["high"]:
        return "high"
    elif value <= thresholds[channel]["low"]:
        return "low"
    else:
        return "normal"

def getIndexLevel(data,c,level_):
    if level_ == "high":
        return np.where(data > thresholds[c]["high"])
    elif level_ == "low":
        return np.where(data < thresholds[c]["low"])
    else:
        return np.where(data <= thresholds[c]["high"] & data >= thresholds[c]["low"])

def sortTime(time):
  return int(time)

def generateStream():
    times = []
    dataChannel = {}
    dataWeather = {}
    days = ['extracts_{}'.format(location)] #['8','9','10','11','12','13','14']
    points = {}
    for c in patterns.keys():
        points[c] = []
    categories = []
    boundaries = []
    levels = []
    # lats = lats.to_numpy()
    # lons = lons.to_numpy()
    # for w in weathers
    for subdir in days:
        print(subdir)
        for rootDay,subdirDays,fileDays in os.walk("{}/{}/".format(dataset,subdir)):
            subdirDays = sorted(subdirDays,key=sortTime)
            for subdirDay in subdirDays:
                print(subdirDay)
                for c in patterns.keys():
                    for level in ["low","normal","high"]:
                        try:
                            dataChannel[c] = pd.read_csv("{}/{}/{}/{}{}_{}_data.csv".format(dataset,subdir,subdirDay,location,c,subdirDay),header=None).to_numpy()
                            indexs = getIndexLevel(dataChannel[c],c,level) #np.where(dataChannel[c] > thresholds[c][patterns[c]])
                            if indexs[0].size == 0:
                              continue
                            latsByPattern = lats[indexs]
                            lonsByPattern = lons[indexs]
                            points = np.dstack((lonsByPattern,latsByPattern))
                            boundary = alphashape.alphashape(points[0],50.0)
                        except:
                            continue
                        times.append(subdirDay)
                        categories.append(c)
                        boundaries.append(boundary)
                        levels.append(level)
        df = pd.DataFrame({
            'time' : times,
            'category' : categories,
            'boundary' : boundaries,
            'value' : levels
        })
        gdf = gpd.GeoDataFrame(df,geometry='boundary')
        gdf.to_csv('{}/Satellite_Events_Stream_Standard_in_{}.csv'.format(thresh_dir,subdir),index=None)

if __name__ == "__main__":
    generateStream()